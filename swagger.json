{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.1",
    "title": "kapusta-project",
    "description": "kapusta-project",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "text/plain"],
  "produces": ["application/json", "text/plain"],
  "servers": [
    {
      "url": "http://localhost:4444/api"
    },
    { "url": "https://kapusta-project-back.onrender.com/api" },
    { "url": "https://eimanager.netlify.app/api/" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Transactions",
      "description": "Transactions endpoints"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Register's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registration was successful, a verification email and@and.com was sent to you",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "409": {
            "description": "The email is already taken by another user, try logging in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterError"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User authentication",
        "parameters": [],
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "User has not verified his email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginErrorVerifiedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/get-user": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "patch": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {},
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/balance": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Change Balance",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Balance's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BalanceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceRequestError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/update-user": {
      "patch": {
        "tags": ["Auth"],
        "summary": "User's update",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User's update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateResponse"
                }
              }
            }
          },
          "500": {
            "description": "Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/verify/{verificationToken}": {
      "get": {
        "tags": ["Auth"],
        "summary": "Verify email address",
        "parameters": [
          {
            "in": "path",
            "name": "verificationToken",
            "required": true,
            "type": "string",
            "description": "Token for verifying email addres"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully verified email address",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserVerifyResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseUserVerify"
                }
              }
            }
          }
        }
      }
    },
    "/users/refresh-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Refresh password",
        "parameters": [],
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          },
          "409": {
            "description": "User with this email 'any@any.com' is not in the database. Please register",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshError"
                }
              }
            }
          },
          "500": {
            "description": "Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Refresh token. Change Bearer RefreshToken on header request!",
        "parameters": [],
        "requestBody": {
          "description": "Register's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          },
          "500": {
            "description": "Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": ["Auth"],
        "summary": "Initiate Google OAuth2 flow",
        "parameters": [],
        "requestBody": {},
        "responses": {
          "302": {
            "description": "Redirect to Google OAuth2 authorization page"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET 'https://kapusta-project-back.onrender.com/auth/google-redirection' -H 'accept: application/json'"
          }
        ]
      }
    },

    "/auth/google-redirect": {
      "get": {
        "tags": ["Auth"],
        "summary": "Initiate Google OAuth2 flow",
        "parameters": [],
        "requestBody": {},
        "responses": {
          "302": {
            "description": "Redirect to Google OAuth2 authorization page"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET 'https://kapusta-project-back.onrender.com/auth/google-redirection' -H 'accept: application/json'"
          }
        ]
      }
    },
    "/transaction/operation": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Add new transaction",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Transaction's object with balance",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTransactionError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/new": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Add new transaction",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Transaction's object with balance",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTransactionError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/delete/{id}": {
      "delete": {
        "tags": ["Transactions"],
        "summary": "Delete one transaction",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "The id of transaction",
            "example": "63f8fe89be7201f84080608d"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTransactionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTransactionErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/summary": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Transaction by month",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Transaction's year and month",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionYearRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTransactionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTransactionErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/all-summary-reports": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Get all transactions by month",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Transaction's by month",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionMonthRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionMonthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/category-reports": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Get transactions by date",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Transaction's by category",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionCategoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/all-operation": {
      "post": {
        "tags": ["Transactions"],
        "summary": "All transactions",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "All Transactions",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionAllOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionAllOperationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/items-category-reports": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Get transactions by period and category",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Transaction's by category",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionOneCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOneCategoryResponse"
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegisterRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "RegisterResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "success"
          },
          "code": {
            "type": "string",
            "description": "201"
          },
          "user": {
            "type": "object",
            "description": "User's credential",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            }
          }
        }
      },
      "RegisterError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error"
          },
          "code": {
            "type": "string",
            "description": "409"
          },
          "message": {
            "type": "string",
            "description": "Email in use"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "success"
          },
          "code": {
            "type": "string",
            "description": "200"
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "User's id"
              },
              "token": {
                "type": "string",
                "description": "User's token"
              },
              "verificationToken": {
                "type": "null",
                "description": "User's token"
              },
              "verify": {
                "type": "boolean",
                "description": "User's token"
              },
              "balance": {
                "type": "number",
                "description": "User's balance"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            }
          }
        }
      },
      "LoginErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error"
          },
          "code": {
            "type": "string",
            "description": "401"
          },
          "message": {
            "type": "string",
            "description": "Invalid email address or password"
          }
        }
      },
      "LoginErrorVerifiedResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error"
          },
          "code": {
            "type": "string",
            "description": "409"
          },
          "message": {
            "type": "string",
            "description": "User has not verified his email"
          }
        }
      },
      "CurrentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "success"
          },
          "code": {
            "type": "string",
            "description": "201"
          },
          "data": {
            "type": "object",
            "description": "User's credential",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "firstVisit": {
                "type": "boolean",
                "description": "User's first visit"
              },
              "firstBalance": {
                "type": "boolean",
                "description": "User's first balance"
              },
              "_id": {
                "type": "string",
                "description": "User's id"
              },
              "password": {
                "type": "string",
                "description": "User's password"
              },
              "accessToken": {
                "type": "string",
                "description": "User's token"
              },
              "refreshToken": {
                "type": "string",
                "description": "User's token"
              },
              "verify": {
                "type": "boolean",
                "description": "User's token"
              },
              "verificationToken": {
                "type": "null",
                "description": "User's token"
              },
              "avatarUrl": {
                "type": "string",
                "description": "User's avatar"
              },
              "userName": {
                "type": "string",
                "description": "User's name"
              },
              "createdAt": {
                "type": "string",
                "description": "User's created date"
              },
              "updatedAt": {
                "type": "string",
                "description": "User's updated date"
              },
              "balance": {
                "type": "number",
                "description": "User's balance"
              }
            }
          }
        }
      },
      "CurrentErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error"
          },
          "code": {
            "type": "string",
            "description": "401"
          },
          "message": {
            "type": "string",
            "description": "Unauthorized"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "success"
          },
          "code": {
            "type": "string",
            "description": "201"
          },
          "message": {
            "type": "string",
            "description": "The exit was successful"
          }
        }
      },
      "LogoutErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error"
          },
          "code": {
            "type": "string",
            "description": "401"
          },
          "message": {
            "type": "string",
            "description": "Unauthorized"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error",
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "Error code",
            "example": "500"
          },
          "message": {
            "type": "string",
            "description": "Invalid email address or password",
            "example": "Invalid email address or password"
          }
        }
      },
      "BalanceRequest": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "number",
            "description": "User's balance",
            "example": 0
          }
        }
      },
      "BalanceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "success"
          },
          "code": {
            "type": "string",
            "description": "201"
          },
          "data": {
            "type": "object",
            "properties": {
              "balance": {
                "type": "number",
                "description": "User's balance",
                "example": 50000
              }
            }
          }
        }
      },
      "BalanceRequestError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error",
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "400",
            "example": "400"
          },
          "message": {
            "type": "string",
            "description": "Not valid balance",
            "example": "Not valid balance"
          }
        }
      },
      "NotFoundErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error",
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "404",
            "example": "404"
          },
          "message": {
            "type": "string",
            "description": "Not found",
            "example": "Not found"
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "required": ["userName", "avatarUrl"],
        "properties": {
          "userName": {
            "type": "string",
            "description": "User's name"
          },
          "avatarUrl": {
            "type": "string",
            "description": "User's avatar url",
            "example": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS0UMAuEo7HPOyChm1Szf3jrlrk7knkVWy8QQ&usqp=CAU"
          }
        }
      },
      "UserUpdateResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "success"
          },
          "code": {
            "type": "string",
            "description": "201"
          },
          "data": {
            "type": "object",
            "description": "User's credential",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "firstVisit": {
                "type": "boolean",
                "description": "User's first visit"
              },
              "firstBalance": {
                "type": "boolean",
                "description": "User's first balance"
              },
              "_id": {
                "type": "string",
                "description": "User's id"
              },
              "password": {
                "type": "string",
                "description": "User's password"
              },
              "accessToken": {
                "type": "string",
                "description": "User's token"
              },
              "refreshToken": {
                "type": "string",
                "description": "User's token"
              },
              "verify": {
                "type": "boolean",
                "description": "User's token"
              },
              "verificationToken": {
                "type": "null",
                "description": "User's token"
              },
              "avatarUrl": {
                "type": "string",
                "description": "User's avatar"
              },
              "userName": {
                "type": "string",
                "description": "User's name"
              },
              "createdAt": {
                "type": "string",
                "description": "User's created date"
              },
              "updatedAt": {
                "type": "string",
                "description": "User's updated date"
              },
              "balance": {
                "type": "number",
                "description": "User's balance"
              }
            }
          }
        }
      },
      "UserVerifyResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token for authenticated requests",
            "example": "Congratulations, your email has been successfully verified."
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token for acquiring new access tokens"
          }
        }
      },
      "ErrorResponseUserVerify": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error",
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "404",
            "example": "404"
          },
          "message": {
            "type": "string",
            "description": "User not found",
            "example": "User not found"
          }
        }
      },
      "RepeatVerifyRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "UserRepeatVerifyResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "success"
          },
          "code": {
            "type": "string",
            "description": "200"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Verification email sent",
                "example": "Verification email sent"
              }
            }
          }
        }
      },
      "ErrorResponseUserRepeatVerify": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error",
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "409",
            "example": "409"
          },
          "message": {
            "type": "string",
            "description": "Verification has already been passed",
            "example": "Verification has already been passed"
          }
        }
      },
      "RefreshRequest": {
        "type": "object",
        "required": ["refreshToken"],
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "User's refresh token",
            "format": "Token"
          }
        }
      },
      "RefreshResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "success"
          },
          "code": {
            "type": "string",
            "description": "201"
          },
          "data": {
            "type": "object",
            "description": "User's tokens",
            "properties": {
              "user": {
                "type": "object",
                "description": "User's tokens",
                "properties": {
                  "accessToken": {
                    "type": "string",
                    "description": "User's accessToken"
                  },
                  "refreshToken": {
                    "type": "string",
                    "description": "User's refreshToken"
                  }
                }
              }
            }
          }
        }
      },
      "RefreshError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error"
          },
          "code": {
            "type": "string",
            "description": "409"
          },
          "message": {
            "type": "string",
            "description": "User with this email 'any@any.com' is not in the database. Please register"
          }
        }
      },
      "TransactionRequest": {
        "type": "object",
        "required": ["operation"],
        "properties": {
          "operation": {
            "type": "string",
            "description": "Type of transaction",
            "example": "income"
          }
        }
      },
      "CreateTransactionRequest": {
        "type": "object",
        "required": [
          "operation",
          "description",
          "category",
          "sum",
          "date",
          "month",
          "year",
          "currency"
        ],
        "properties": {
          "operation": {
            "type": "string",
            "description": "Type of transaction",
            "example": "income"
          },
          "description": {
            "type": "string",
            "description": "Description of transaction",
            "example": "Зарплата за лютий"
          },
          "category": {
            "type": "string",
            "description": "Category of transaction",
            "example": "Salary"
          },
          "sum": {
            "type": "number",
            "description": "Sum of transaction",
            "example": 100000
          },
          "date": {
            "type": "string",
            "description": "Date of transaction",
            "example": "25.02.2023"
          },
          "month": {
            "type": "string",
            "description": "Month of transaction",
            "example": "February"
          },
          "year": {
            "type": "string",
            "description": "Year of transaction",
            "example": "2023"
          },
          "currency": {
            "type": "string",
            "description": "Currency of transaction",
            "example": "UAH"
          }
        }
      },
      "BalanceForTransactionRequest": {
        "type": "number",
        "properties": {
          "balance": {
            "type": "number",
            "description": "User's balance",
            "example": 10000000
          }
        }
      },
      "CreateTransactionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Created"
          },
          "code": {
            "type": "string",
            "description": "201"
          },
          "resultTransaction": {
            "type": "object",
            "description": "Full transaction",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Id of transaction"
              },
              "type": {
                "type": "string",
                "description": "Type of transaction",
                "example": "income"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of transaction",
                "example": "23.02.2023"
              },
              "category": {
                "type": "string",
                "description": "Category of transaction"
              },
              "sum": {
                "type": "number",
                "description": "Sum of transaction"
              },
              "day": {
                "type": "string",
                "description": "Day of transaction"
              },
              "month": {
                "type": "string",
                "description": "Month of transaction"
              },
              "year": {
                "type": "string",
                "description": "Year of transaction"
              },
              "userId": {
                "type": "string",
                "description": "User's id"
              },
              "currency": {
                "type": "string",
                "description": "Currency of transaction"
              },
              "createdAt": {
                "type": "string",
                "format": "date",
                "description": "Date creation of transaction"
              },
              "updatedAt": {
                "type": "string",
                "format": "date",
                "description": "Date updation of transaction"
              }
            }
          },
          "balance": {
            "type": "number",
            "description": "User's balance"
          }
        }
      },
      "CreateTransactionError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error",
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "400",
            "example": "400"
          },
          "message": {
            "type": "string",
            "description": "Missing required field",
            "example": "Missing required field"
          }
        }
      },
      "DeleteTransactionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          },
          "code": {
            "type": "string",
            "description": "200",
            "example": "200"
          },
          "message": {
            "type": "string",
            "description": "Your transaction was deleted!",
            "example": "Your transaction was deleted!"
          }
        }
      },
      "DeleteTransactionErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error",
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "404",
            "example": "404"
          },
          "message": {
            "type": "string",
            "description": "Id of transaction not found",
            "example": "Id of transaction not found"
          }
        }
      },
      "TransactionYearRequest": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "Type of transaction",
            "example": "income"
          }
        }
      },
      "UpdateTransactionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Created"
          },
          "code": {
            "type": "string",
            "description": "201"
          },
          "resultTransaction": {
            "type": "object",
            "description": "Updated transaction",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Id of transaction"
              },
              "type": {
                "type": "string",
                "description": "Type of transaction",
                "example": "income"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of transaction",
                "example": "23.05.2023"
              },
              "category": {
                "type": "string",
                "description": "Category of transaction"
              },
              "subCategory": {
                "type": "string",
                "description": "Subcategory of transaction"
              },
              "sum": {
                "type": "number",
                "description": "Sum of transaction"
              },
              "day": {
                "type": "string",
                "description": "Day of transaction"
              },
              "month": {
                "type": "string",
                "description": "Month of transaction"
              },
              "year": {
                "type": "string",
                "description": "Year of transaction"
              },
              "userId": {
                "type": "string",
                "description": "User's id"
              },
              "createdAt": {
                "type": "string",
                "format": "date",
                "description": "Date creation of transaction"
              },
              "updatedAt": {
                "type": "string",
                "format": "date",
                "description": "Date updation of transaction"
              }
            }
          },
          "balance": {
            "type": "number",
            "description": "User's balance"
          }
        }
      },
      "BalanceErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error",
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "404",
            "example": "404"
          },
          "message": {
            "type": "string",
            "description": "Not found",
            "example": "Not found"
          }
        }
      },
      "UpdateTransactionErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "error",
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "404",
            "example": "404"
          },
          "message": {
            "type": "string",
            "description": "Not found",
            "example": "Not found"
          }
        }
      },
      "TransactionMonthRequest": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "Type of transaction",
            "example": "income"
          },
          "month": {
            "type": "string",
            "description": "Month of transaction",
            "example": "February"
          },
          "year": {
            "type": "string",
            "description": "Year of transaction",
            "example": "2023"
          }
        }
      },
      "GetTransactionMonthResponse": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "Type of transaction",
            "example": "income"
          },
          "sum": {
            "type": "number",
            "description": "Sum of transaction"
          }
        }
      },

      "TransactionCategoryRequest": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "Type of transaction",
            "example": "income"
          },
          "month": {
            "type": "string",
            "description": "Month of transaction",
            "example": "February"
          },
          "year": {
            "type": "string",
            "description": "Year of transaction",
            "example": "2023"
          }
        }
      },
      "TransactionOneCategoryRequest": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "Type of transaction",
            "example": "income"
          },
          "category": {
            "type": "string",
            "description": "Type of transaction",
            "example": "Salary"
          },
          "month": {
            "type": "string",
            "description": "Month of transaction",
            "example": "February"
          },
          "year": {
            "type": "string",
            "description": "Year of transaction",
            "example": "2023"
          }
        }
      },
      "TransactionAllOperationRequest": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "Type of transaction",
            "example": "income"
          },
          "category": {
            "type": "string",
            "description": "Type of transaction",
            "example": "Salary"
          },
          "month": {
            "type": "string",
            "description": "Month of transaction",
            "example": "February"
          },
          "year": {
            "type": "string",
            "description": "Year of transaction",
            "example": "2023"
          }
        }
      },
      "GetTransactionCategoryResponse": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "Type of category",
            "example": "Salary"
          },
          "sum": {
            "type": "number",
            "description": "Sum of category"
          }
        }
      },
      "GetTransactionAllOperationResponse": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "Type of transaction",
            "example": "income"
          },
          "sum": {
            "type": "number",
            "description": "Sum of transaction"
          }
        }
      },
      "GetOneCategoryResponse": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category of transaction"
          },
          "sum": {
            "type": "number",
            "description": "Sum of transaction"
          }
        }
      }
    },

    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
